<?php

/**
 * @file
 * This module injects itself into Drupal's Authentication stack.
 */

declare(strict_types = 1);

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;

/**
 * Implements hook_help().
 */
function ldap_authentication_help($path, $arg) {

  $authentication_help = t('LDAP authentication allows authentication against an LDAP server. It may be used alongside other authentication means such as built in Drupal authentication, OpenID, etc.  More detailed help is available on drupal.org at !helplink.', [
    '%helplink' => Link::fromTextAndUrl('http://drupal.org/node/997082', Url::fromUri('http://drupal.org/node/997082')),
  ]
  );
  switch ($path) {
    case 'admin/config/people/ldap/authentication':
    case 'admin/help#ldap_authentication':
      return '<p>' . $authentication_help . '</p>';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ldap_authentication_form_user_pass_alter(&$form, FormStateInterface $form_state) {
  // Add the LDAP user password validation before the user module's validation.
  array_unshift($form['#validate'], 'ldap_authentication_user_pass_validate');
}

/**
 * A validate handler on the login form.
 *
 * Check supplied username/password against local users table. If successful,
 * the UID from $form_state is set to the matching user ID.
 *
 * @param array $form
 *   The form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function ldap_authentication_core_override_user_login_authenticate_validate(array $form, FormStateInterface $form_state) {
  // No additional validation of user credentials is needed when the uid is set.
  if (!empty($form_state->get('uid'))) {
    return;
  }

  $original_form = $form_state->getFormObject();
  $original_form->validateAuthentication($form, $form_state);
}

/**
 * Change how password is validated.
 *
 * Prevents changing of password for LDAP-associated accounts, these
 * fields are already blocked in the form but for password reset this is
 * a necessary check. Non-LDAP accounts should not be affected.
 *
 * @param array $form
 *   The form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function ldap_authentication_user_pass_validate(array &$form, FormStateInterface $form_state) {
  $config = \Drupal::config('ldap_authentication.settings');

  if ($config->get('passwordOption') === 'allow') {
    // Password field has not been disabled, reset is generally allowed.
    return;
  }

  $user_storage = \Drupal::entityTypeManager()->getStorage('user');
  $name_or_mail = trim($form_state->getValue('name'));
  $users = $user_storage->loadByProperties(['mail' => $name_or_mail]);
  $account = $users ? reset($users) : FALSE;

  if (!$account) {
    $users = $user_storage->loadByProperties(['name' => $name_or_mail]);
    $account = $users ? reset($users) : FALSE;
  }

  if (!$account) {
    // Fall through to regular user-not-found message and associated checks.
    return;
  }

  /** @var \Drupal\externalauth\Authmap $authmap */
  $authmap = \Drupal::service('externalauth.authmap');
  $authname = $authmap->get($account->id(), 'ldap_user');
  if ($authname) {
    // It's an LDAP account and hide/disable is on, throw a validation error.
    if ($config->get('ldapUserHelpLinkUrl')) {
      $form_state->setErrorByName('name', t(
          'You may not reset your password here. You must reset your password via the directions at <a href=":url">@text</a>.',
          [
            ':url' => $config->get('ldapUserHelpLinkUrl'),
            '@text' => $config->get('ldapUserHelpLinkText'),
          ])
      );
    }
    else {
      $form_state->setErrorByName('name', t("You may not reset your password here. You must reset your password via one of your organization's password management sites."));
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter user editing form (profile form) based on LDAP authentication
 * configuration.
 *
 * @todo This function hides corner cases and does not consistently embed the
 * help text.
 */
function ldap_authentication_form_user_form_alter(&$form, FormStateInterface $form_state) {

  $user = $form_state->getBuildInfo()['callback_object']->getEntity();
  $config = \Drupal::config('ldap_authentication.settings');
  /** @var \Drupal\externalauth\Authmap $authmap */
  $authmap = \Drupal::service('externalauth.authmap');
  $authname = $authmap->get($user->id(), 'ldap_user');
  if ($authname) {
    if ($config->get('emailOption') === 'remove') {
      $form['account']['mail']['#access'] = FALSE;
    }
    elseif ($config->get('emailOption') === 'disable') {
      $form['account']['mail']['#disabled'] = TRUE;
      $form['account']['mail']['#description'] = t('This email address is automatically set and may not be changed.');
    }

    if (!ldap_authentication_show_password_field($user)) {
      if ($config->get('passwordOption') === 'hide') {
        // @todo Allow for the case where email changes are allowed to show
        // current pass.
        $form['account']['current_pass']['#access'] = FALSE;
        $form['account']['pass']['#access'] = FALSE;
      }
      elseif ($config->get('emailOption') === 'disable') {
        $form['account']['current_pass']['#disabled'] = TRUE;
        $form['account']['pass']['#disabled'] = TRUE;
        if ($config->get('ldapUserHelpLinkUrl')) {
          $form['account']['current_pass']['#description'] = Link::fromTextAndUrl($config->get('ldapUserHelpLinkText'), Url::fromUri($config->get('ldapUserHelpLinkUrl')));
        }
        else {
          $form['account']['current_pass']['#description'] = t('The password cannot be changed using this website.');
        }
      }
    }
  }
}

/**
 * Should the password field be shown?
 *
 * @param \Drupal\user\UserInterface|\Drupal\Core\Session\AccountProxyInterface $user
 *   User account.
 *
 * @return bool
 *   Password status.
 */
function ldap_authentication_show_password_field($user = NULL): bool {

  if (!$user) {
    $user = \Drupal::currentUser();
  }

  if ($user->hasPermission('administer users')) {
    return TRUE;
  }

  // Hide only if LDAP authenticated and updating password is not allowed.
  /** @var \Drupal\externalauth\Authmap $authmap */
  $authmap = \Drupal::service('externalauth.authmap');
  $authname = $authmap->get($user->id(), 'ldap_user');
  if ($authname) {
    $password_option = \Drupal::config('ldap_authentication.settings')
      ->get('passwordOption');
    return $password_option === 'allow';
  }

  // Default to showing.
  return TRUE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * For user_login_form.
 */
function ldap_authentication_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  _ldap_authentication_login_form_alter($form, $form_state, 'user_login');

}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * For user_login_block.
 */
function ldap_authentication_form_user_login_block_alter(&$form, FormStateInterface $form_state) {
  _ldap_authentication_login_form_alter($form, $form_state, 'user_login_block');

}

/**
 * Validate function for user logon forms.
 *
 * @param array $form
 *   The form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function ldap_authentication_user_login_authenticate_validate(array $form, FormStateInterface $form_state) {
  if ($form_state->getValue('pass') && $form_state->getValue('name')) {
    $validator = \Drupal::service('ldap_authentication.login_validator');
    $form_state = $validator->validateLogin($form_state);
  }
}

/**
 * Helper function for the user login block.
 *
 * Relevant in ldap_authn_form_user_login_block_alter and
 * ldap_authn_form_user_login_alter.
 *
 * @param array $form
 *   The form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 * @param string $form_id
 *   The form ID.
 */
function _ldap_authentication_login_form_alter(array &$form, FormStateInterface $form_state, string $form_id) {
  /** @var \Drupal\ldap_authentication\AuthenticationServers $authentication_servers */
  $authentication_servers = \Drupal::service('ldap_authentication.servers');
  if (!$authentication_servers->authenticationServersAvailable()) {
    return;
  }

  $config = \Drupal::config('ldap_authentication.settings');

  // Add validate function to test for LDAP authentication
  // should be placed after user_login_authenticate_validate
  // 1. user_login_name_validate
  // 2. user_login_authenticate_validate
  // 3. external authentication validate functions
  // 4. user_login_final_validate
  //
  // As articulated above user_login_default_validators() in user.module without
  // any other external authentication modules, this array will start out as: [
  // 'user_login_name_validate',
  // 'user_login_authenticate_validate',
  // 'user_login_final_validate'
  // ].
  if (is_array($form['#validate']) && $config->get('authenticationMode')) {
    $key = array_search('::validateAuthentication', $form['#validate'], TRUE);
    if ($key !== FALSE) {
      $form['#validate'][$key] = 'ldap_authentication_core_override_user_login_authenticate_validate';
      array_splice($form['#validate'], $key + 1, 0, 'ldap_authentication_user_login_authenticate_validate');

    }
  }

  // Add help information for entering in username/password.
  if ($config->get('loginUIUsernameTxt')) {
    $form['name']['#description'] = $config->get('loginUIUsernameTxt');
  }
  if ($config->get('loginUIPasswordTxt')) {
    $form['pass']['#description'] = $config->get('loginUIPasswordTxt');
  }

  if ($config->get('emailTemplateUsageRedirectOnLogin')) {
    $form['#submit'][] = 'Drupal\ldap_authentication\Routing\EmailTemplateService::checkForEmailTemplate';
  }
}
